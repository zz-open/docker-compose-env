version: "3.8"

volumes:
  es:
    driver: ${VOLUMES_DRIVER}

services:
### ElasticSearch INIT ########################################
  es-init:
    build:
      context: ${ES_HOST_PATH}
      args:
        - ELASTICSEARCH_VERSION=${ELASTIC_STACK_VERSION}
    container_name: ${ES_CONTAINER_NAME_INIT}
    hostname: ${ES_HOSTNAME_INIT}
    volumes:
      - ${ES_PATH}/certs:/usr/share/elasticsearch/config/certs
    privileged: true
    user: root
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: ${ES_CONTAINER_NAME}\n"\
          "    dns:\n"\
          "      - ${ES_CONTAINER_NAME}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - ${ES_BACKEND_IP}\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://${ES_CONTAINER_NAME}:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://${ES_CONTAINER_NAME}:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      backend:
        ipv4_address: ${ES_BACKEND_IP_INIT}
### ElasticSearch ########################################
  es:
    build:
      context: ${ES_HOST_PATH}
      args:
        - ELASTICSEARCH_VERSION=${ELASTIC_STACK_VERSION}
    container_name: ${ES_CONTAINER_NAME}
    hostname: ${ES_HOSTNAME}
    privileged: true
    user: root
    volumes:
      - ${ES_PATH}/certs:/usr/share/elasticsearch/config/certs
      - ${DATA_PATH_HOST}/${ES_CONTAINER_NAME}:/usr/share/elasticsearch/data # 需要777权限
    environment:
      TZ: ${TZ}
      discovery.type: single-node
      cluster.name: ${ES_HOSTNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      node.name: ${ES_CONTAINER_NAME}
      xpack.security.http.ssl.key: certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.key
      xpack.security.http.ssl.certificate: certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.crt
      xpack.security.transport.ssl.key: certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.key
      xpack.security.transport.ssl.certificate: certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.crt
      bootstrap.memory_lock: true
      xpack.security.enabled: true
      xpack.security.http.ssl.enabled: true
      xpack.security.transport.ssl.enabled: true
      xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.license.self_generated.type: ${LICENSE}
      http.cors.enabled: true
      http.cors.allow-origin: "'*'"
      http.cors.allow-credentials: true
      http.cors.allow-headers: "X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
    ports:
      - "${ES_HOST_HTTP_PORT}:9200"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL", 
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      backend:
        ipv4_address: ${ES_BACKEND_IP}